
import pandas as pd
from sqlalchemy import create_engine
import os
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DATABASE_URL = "postgresql+psycopg2://postgres:355812@localhost:5432/linkedin_jobs"  # –ó–∞–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å
engine = create_engine(DATABASE_URL)
FOLDER = "/Users/aleksandrsudro/Desktop/archive"

def clean_column_names(df):
    """–û—á–∏—â–∞–µ—Ç –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫"""
    df.columns = [col.strip().replace(' ', '_').lower() for col in df.columns]
    return df

def safe_import(table_name, csv_file, custom_processing=None):
    file_path = os.path.join(FOLDER, csv_file)
    
    if not os.path.exists(file_path):
        print(f"‚úó –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"\n{'='*60}")
    print(f"–ò–º–ø–æ—Ä—Ç {table_name} –∏–∑ {csv_file}")
    print(f"{'='*60}")
    
    try:
        # –ß–∏—Ç–∞–µ–º CSV
        df = pd.read_csv(file_path)
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        print(f"  –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        
        # –û—á–∏—â–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        df = clean_column_names(df)
        print(f"  –û—á–∏—â–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
        if len(df) > 0 and any(df.iloc[0].astype(str).str.contains('id|name|count|salary', case=False, na=False)):
            print("  ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É")
            df = df.iloc[1:].reset_index(drop=True)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        initial_rows = len(df)
        df = df.dropna(how='all')
        if len(df) < initial_rows:
            print(f"  –£–¥–∞–ª–µ–Ω–æ {initial_rows - len(df)} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        if custom_processing:
            df, info = custom_processing(df)
            print(f"  {info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ skills –Ω–µ –ø—É—Å—Ç–∞
        if table_name == 'skills' and len(df) == 0:
            print(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return False
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        if table_name in ['benefits', 'salaries']:
            initial_count = len(df)
            if 'job_id' in df.columns:
                df = df.drop_duplicates(subset=['job_id'])
                print(f"  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π –ø–æ job_id: {initial_count - len(df)}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if 'views' in df.columns:
            df['views'] = pd.to_numeric(df['views'], errors='coerce').fillna(0).astype(int)
        if 'applies' in df.columns:
            df['applies'] = pd.to_numeric(df['applies'], errors='coerce').fillna(0).astype(int)
        if 'remote_allowed' in df.columns:
            df['remote_allowed'] = df['remote_allowed'].map({'True': True, 'False': False, True: True, False: False}).fillna(False)
        
        # –ò–º–ø–æ—Ä—Ç –≤ –ë–î
        success = df.to_sql(table_name, engine, if_exists='replace', index=False, method='multi')
        print(f"‚úì {table_name}: {len(df)} —Å—Ç—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {table_name}: {str(e)}")
        import traceback
        traceback.print_exc()  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return False
# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
def process_companies(df):
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    df = df[df['company_id'].notna() & (df['company_id'] != 'company_id')]
    return df, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∫–æ–º–ø–∞–Ω–∏–π"

def process_industries(df):
    df = df[df['industry_id'].notna() & (df['industry_id'] != 'industry_id')]
    return df, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –æ—Ç—Ä–∞—Å–ª–µ–π"

def process_skills(df):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É skills —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫"""
    # –û—á–∏—â–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ (skill_abr -> skill_abr, skill_name -> skill_name)
    df = clean_column_names(df)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    if 'skill_abr' not in df.columns:
        print("  ‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ 'skill_abr' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", list(df.columns))
        return df, f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ skill_abr"
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
    df = df[df['skill_abr'].notna() & (df['skill_name'].notna())]
    df = df.drop_duplicates(subset=['skill_abr'])
    
    # –°–æ–∑–¥–∞–µ–º skill_id –∏–∑ skill_abr
    df['skill_id'] = 'skill_' + df['skill_abr'].str.lower().str.replace(' ', '_').str.replace('-', '_').str[:30]
    
    # –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    df = df[['skill_id', 'skill_abr', 'skill_name']]
    
    return df, f"–°–æ–∑–¥–∞–Ω–æ {len(df)} –Ω–∞–≤—ã–∫–æ–≤ —Å ID (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: skill_abr)"

def process_jobs(df):
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ job_postings.csv
    needed_cols = ['job_id', 'company_id', 'title', 'description', 'location', 'views', 
                   'formatted_work_type', 'applies', 'remote_allowed', 'formatted_experience_level', 
                   'work_type', 'zip_code']
    available_cols = [col for col in needed_cols if col in df.columns]
    df = df[available_cols].copy()
    
    # –û—á–∏—Å—Ç–∫–∞ job_id
    df = df[df['job_id'].notna() & (df['job_id'] != 'job_id')]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è views –∏ applies
    if 'views' in df.columns:
        df['views'] = pd.to_numeric(df['views'], errors='coerce').fillna(0).astype(int)
    if 'applies' in df.columns:
        df['applies'] = pd.to_numeric(df['applies'], errors='coerce').fillna(0).astype(int)
    if 'remote_allowed' in df.columns:
        df['remote_allowed'] = df['remote_allowed'].astype(str).map({'True': True, 'False': False, 'true': True, 'false': False, '1': True, '0': False}).fillna(False)
    
    return df, f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(df)} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ {len(available_cols)} –∫–æ–ª–æ–Ω–æ–∫"

def process_salaries(df):
    # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    df = df[df['salary_id'].notna() & (df['salary_id'] != 'salary_id')]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    for col in ['max_salary', 'med_salary', 'min_salary']:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º NULL –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç
    df[['max_salary', 'med_salary', 'min_salary']] = df[['max_salary', 'med_salary', 'min_salary']].fillna(0)
    
    return df, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∑–∞—Ä–ø–ª–∞—Ç"

def process_employee_counts(df):
    df = df[df['company_id'].notna() & (df['company_id'] != 'company_id')]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
    df['employee_count'] = pd.to_numeric(df['employee_count'], errors='coerce').fillna(0).astype(int)
    df['follower_count'] = pd.to_numeric(df['follower_count'], errors='coerce').fillna(0).astype(int)
    
    return df, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö"

def process_company_industries(df):
    # CSV —Å–æ–¥–µ—Ä–∂–∏—Ç company_id,industry - –Ω—É–∂–Ω–æ –º–∞–ø–∏—Ç—å industry –Ω–∞ industry_id
    df = df[df['industry'].notna()]
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(df)} –ø–∞—Ä –∫–æ–º–ø–∞–Ω–∏—è-–æ—Ç—Ä–∞—Å–ª—å")
    return df, f"–ì–æ—Ç–æ–≤–æ –∫ –º–∞–ø–ø–∏–Ω–≥—É {len(df)} –∑–∞–ø–∏—Å–µ–π"

def process_company_specialities(df):
    df = df[df['speciality'].notna() & (df['speciality'] != 'speciality')]
    return df, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π"

def process_job_industries(df):
    df = df[df['industry_id'].notna() & (df['industry_id'] != 'industry_id')]
    return df, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –ø–∞—Ä –≤–∞–∫–∞–Ω—Å–∏—è-–æ—Ç—Ä–∞—Å–ª—å"

def process_job_skills(df):
    # CSV —Å–æ–¥–µ—Ä–∂–∏—Ç job_id,skill_abr - –Ω—É–∂–Ω–æ –º–∞–ø–∏—Ç—å skill_abr –Ω–∞ skill_id
    df = df[df['skill_abr'].notna()]
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(df)} –ø–∞—Ä –≤–∞–∫–∞–Ω—Å–∏—è-–Ω–∞–≤—ã–∫")
    return df, f"–ì–æ—Ç–æ–≤–æ –∫ –º–∞–ø–ø–∏–Ω–≥—É {len(df)} –∑–∞–ø–∏—Å–µ–π"

def process_benefits(df):
    df = df[df['job_id'].notna() & (df['job_id'] != 'job_id')]
    df = df.drop_duplicates(subset=['job_id'])
    return df, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤"

# –°–ø–∏—Å–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
import_steps = [
    ('companies', 'companies.csv', process_companies),
    ('industries', 'industries.csv', process_industries),
    ('skills', 'skills.csv', process_skills),
    ('jobs', 'job_postings.csv', process_jobs),
    ('benefits', 'benefits.csv', process_benefits),
    ('salaries', 'salaries.csv', process_salaries),
    ('employee_counts', 'employee_counts.csv', process_employee_counts),
    ('company_specialities', 'company_specialities.csv', process_company_specialities),
    ('job_industries', 'job_industries.csv', process_job_industries),
    ('job_skills', 'job_skills.csv', process_job_skills),
    # company_industries –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑-–∑–∞ –º–∞–ø–ø–∏–Ω–≥–∞
]

print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑: {FOLDER}")
successful_imports = 0

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç
for table_name, csv_file, processor in import_steps:
    if safe_import(table_name, csv_file, processor):
        successful_imports += 1

print(f"\n{'='*60}")
print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {successful_imports}/{len(import_steps)} —Ç–∞–±–ª–∏—Ü")

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ company_industries (–º–∞–ø–ø–∏–Ω–≥ industry ‚Üí industry_id)
print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ company_industries —Å –º–∞–ø–ø–∏–Ω–≥–æ–º...")
try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_ci = pd.read_csv(os.path.join(FOLDER, 'company_industries.csv'))
    df_ci = clean_column_names(df_ci)
    print(f"  –ö–æ–ª–æ–Ω–∫–∏ –≤ company_industries.csv: {list(df_ci.columns)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ industry
    if 'industry' not in df_ci.columns:
        print(f"  ‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ 'industry' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df_ci.columns)}")
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è company_industries")
    else:
        # –ú–∞–ø–ø–∏–Ω–≥ industry_name ‚Üí industry_id
        industry_mapping = pd.read_sql("SELECT industry_id, industry_name FROM industries", engine)
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ {len(industry_mapping)} –æ—Ç—Ä–∞—Å–ª–µ–π –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞")
        
        mapping_dict = dict(zip(industry_mapping['industry_name'].str.lower(), industry_mapping['industry_id']))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        df_ci['industry_id'] = df_ci['industry'].str.lower().map(mapping_dict)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        mapped_count = df_ci['industry_id'].notna().sum()
        print(f"  –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–∞–ø–ª–µ–Ω–æ: {mapped_count} –∏–∑ {len(df_ci)} –∑–∞–ø–∏—Å–µ–π")
        
        if mapped_count > 0:
            df_ci = df_ci[df_ci['industry_id'].notna()][['company_id', 'industry_id']]
            df_ci = df_ci.drop_duplicates()
            df_ci.to_sql('company_industries', engine, if_exists='replace', index=False)
            print(f"‚úì company_industries: {len(df_ci)} –∑–∞–ø–∏—Å–µ–π —Å –º–∞–ø–ø–∏–Ω–≥–æ–º")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è company_industries")
            
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ company_industries: {e}")

# –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ job_skills (–º–∞–ø–ø–∏–Ω–≥ skill_abr ‚Üí skill_id)
print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ job_skills —Å –º–∞–ø–ø–∏–Ω–≥–æ–º...")
try:
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ skills
    skills_count = pd.read_sql("SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = 'skills'", engine)
    if skills_count['count'].iloc[0] == 0:
        print("‚úó –¢–∞–±–ª–∏—Ü–∞ 'skills' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ skills.csv")
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        df_js_raw = pd.read_csv(os.path.join(FOLDER, 'job_skills.csv'))
        df_js_raw = clean_column_names(df_js_raw)
        print(f"  –ö–æ–ª–æ–Ω–∫–∏ –≤ job_skills.csv: {list(df_js_raw.columns)}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º skill_abr –≤–º–µ—Å—Ç–æ skill_abbr
        skills_mapping = pd.read_sql("SELECT skill_id, skill_abr FROM skills", engine)
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ {len(skills_mapping)} –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞")
        
        mapping_dict = dict(zip(skills_mapping['skill_abr'].str.lower(), skills_mapping['skill_id']))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        df_js_raw['skill_id'] = df_js_raw['skill_abr'].str.lower().map(mapping_dict)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞
        mapped_count = df_js_raw['skill_id'].notna().sum()
        print(f"  –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–∞–ø–ª–µ–Ω–æ: {mapped_count} –∏–∑ {len(df_js_raw)} –∑–∞–ø–∏—Å–µ–π")
        
        if mapped_count > 0:
            df_js = df_js_raw[df_js_raw['skill_id'].notna()][['job_id', 'skill_id']]
            df_js.to_sql('job_skills', engine, if_exists='replace', index=False, method='multi')
            print(f"‚úì job_skills: {len(df_js)} –∑–∞–ø–∏—Å–µ–π —Å –º–∞–ø–ø–∏–Ω–≥–æ–º")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è job_skills")
            
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ job_skills: {e}")

print(f"\nüéâ –í–°–ï 11 –¢–ê–ë–õ–ò–¶ –£–°–ü–ï–®–ù–û –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–´!")
print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ pgAdmin4 ‚Üí linkedin_jobs")